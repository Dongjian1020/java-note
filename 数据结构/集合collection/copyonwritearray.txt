public class CopyOnWriteArrayList<E> implements List<E>, RandomAccess, Cloneable, java.io.Serializable {
    private static final long serialVersionUID = 8673264195747942595L;

    /** The lock protecting all mutators */
    transient final ReentrantLock lock = new ReentrantLock();

    /** The array, accessed only via getArray/setArray. */
    private volatile transient Object[] array;
    ...

    public boolean add(E e) {
		final ReentrantLock lock = this.lock;
		lock.lock();
		try {
		    Object[] elements = getArray();
		    int len = elements.length;
		    //拷贝出一个新数组，前len个元素都和元素组的相同cop
		    Object[] newElements = Arrays.copyOf(elements, len + 1);
		    newElements[len] = e;
		    setArray(newElements);
		    return true;
		} finally {
		    lock.unlock();
		}
	}

	final void setArray(Object[] a) {
	    array = a;
	}
}

缺点：
对于修改，都需要进行数组的拷贝，当元素比较多时，很定很慢
