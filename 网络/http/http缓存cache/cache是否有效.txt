参见：
okhttp3.internal.cache.CacheStrategy.Factory#get
	okhttp3.internal.cache.CacheStrategy.Factory#getCandidate
如果 CacheStrategy#networkRequest不为null，则意味着 需要联网（而不使用缓存）

------------------cache的存在时间（ageMillis）：
下述几部分时间的 相加
. now-收到响应的时间
. 收到响应的时间（需要程序保存）-请求发送的时间（需要程序保存）
. 精细间隔：收到响应的时刻 - 服务器告诉我该响应的时刻
long apparentReceivedAge = servedDate != null（是否有serveDate头）
	  ? Math.max(0, receivedResponseMillis - servedDate.getTime())
	  : 0;
  long receivedAge = ageSeconds != -1（是否有age头）
	  ? Math.max(apparentReceivedAge, SECONDS.toMillis(ageSeconds))
	  : apparentReceivedAge;

------------------cache的待刷新间隔（freshMillis）：
是否response有max-age头
	有，为max-age
	否则，是否有expire头
		有
			算的serve_date，则判断 是否有serveDate头
				有，为serveDate
				无，为收到响应的时间（需程序手动保存）
			为 expire-server_date
		无，则根据modifyTime等 进行进一步判断
			参见：okhttp3.internal.cache.CacheStrategy.Factory#computeFreshnessLifetime
再和 request头的max-age 取小值
			
------------------cache是否有效：
ageMillis + minFreshMillis（request头的min-fresh） < freshMillis + maxStaleMillis（request头的max-stale）