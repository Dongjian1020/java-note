参见：
深入分析Java ClassLoader原理
	http://blog.csdn.net/xyang81/article/details/7292380

------------------------------------加载一个类（jvm相关）
当程序主动 使用 某个类时
（即是：加载类A时，除了父亲被加载外，其余的引用的类并不是立刻被加载，而是在使用该类时（如：调用该类的静态成员，new出该类的对象）），该类将被加载
加载
	将类的.class文件（如：类信息，字面常量，符号引用，field数据，方法数据，静态变量 等）读入内存（一个byte[]，加载到方法区）
	产生一个java.lang.Class对象（该对象存在于方法区中）
	--
	类的加载由 classloader 完成，类加载器通常由JVM提供。开发者也可以通过继承ClassLoader基类来创建自己的类加载器。
		同一个类加载器，对于同一个class，只会加载一次
连接
	校验
		该class是否符合虚拟机的要求
	准备
		为静态变量分配内存，并设置默认值
	resolve
		常量池有一些符号引用（符号引用代表了 该类需要使用 其他类/自身类的 什么变量、什么方法），需要将这些符号引用变成直接引用
		如果直接引用 能定位到目标（变量 或者 方法），则意味着 目标类被加载到内存中
			父类会被链接
			而引用的第三方类，会在执行代码指令时，才进行classload
		也意味着 自身类和目标类（可以是父类，引用的第三方类） 链接在一起了
		--
		当仅仅使用 引用类的静态常量时（该静态常量会存入到该引用的常量池中），该引用类并不会被classload
		参见：java.lang.ClassLoader#resolveClass
初始化
	静态变量被赋予正确的值，如：static int age=2，这里的2就是正确的值，而不是int的默认值0
		说明：这里的静态变量 并不是 static final类型（该类型在加载阶段，就被归入到常量池中）
	执行静态代码块

------------------------------------类加载器
Bootstrap classloader
ExtClassLoader
AppClassLoader
用户自定义类加载器（java.lang.ClassLoader的子类）
	有什么用：可以load一个 网络上的class，后，调用该class的方法
	如何实现：复写findClass(String name)，而不是复写loadclass（这样，可以复用 双亲委派机制，也建议这样做）
		其最终被java.lang.ClassLoader#loadClass(java.lang.String name, boolean resolve)所调用，该方法内部采用了 父亲委托加载机制
		当获取了byte[]后，可通过java.lang.ClassLoader#defineClass(String name, byte[] b, int off, int len)来产生class对象
--
判断两个class对象是否相等的 必要条件：.class是同一个，classloader是同一个

------------------------------------加载机制：父亲委托机制
一个类要让某个加载器来加载，那么该加载器会首先请求父加载器加载（不是继承关系，而是组合关系）（从自身的 类加载路径中 加载），父加载器无能为力时才由自身自行加载。
为什么采用这种方式：
	安全
	避免重复加载
Bootstrap classloader是根加载器，其没有父亲加载器

可以在运行程序时，配置虚拟机参数 -XX:+TraceClassLoading 来显示类的加载过程