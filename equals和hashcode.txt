参见：
第3章 对于所有对象都通用的方法
	http://mp.weixin.qq.com/s?__biz=MzIxNDE1NjQ2Mw==&mid=2649872263&idx=1&sn=0188d7575dccb5f67eda2271573a59c0#rd

equals:
自反性(reflexive) 对于任何非null的引用值x,x.equals(x)必须返回true
对称性(symmetric) 对于任何非null的引用值x和y,当且仅当y.equals(x)返回true时,x.equals(y)必须返回true
传递性(transitive) 对于任何非null的引用值,x,y,z,如果x.equals(y)为true,并且y.equals(z)也返回true,那么x.equals(z)也必须返回true
一致性(consistent) 对于任何非null的引用值x和y,只要equals的比较操作在对象中所用的信息没有被修改,多次调用x.equals(y)就会一致地返回true,或者false
对于任何非null的引用值,x,x.equals(null)必须返回false

hashcode:
在应用程序的执行期间,只要对象的equals方法的比较操作所用到的信息没有被修改,那么对这同一个对象调用多次,hashCode方法都必须始终如一地返回同一个整数.在同一个应用程序的多次执行过程中,每次执行所返回的整数可以不一致.
如果两个对象根据equals方法比较是相等的,那么调用这两个对象中任意一个对象的hashCode方法都必须产生同样的整数结果.(即equals相等,那么hashCode一定相等,需要注意的是,反过来不一定成立,即hashCode相等不代表equals相等)
如果两个对象根据equals方法比较是不相等的,那么调用这两个对象中任意一个对象的hashCode方法,则不一定要产生不同的整数结果.但是程序员应该知道,给不相等的对象产生截然不同的证书结果,有可能提高散列表(hash table)的性能.

hashCode其实主要用于跟基于散列的集合合作
如HashMap会把相同的hashCode的对象放在同一个散列桶(hash bucket)中

可参见eclipse中自动生成的equals和hashcode方法