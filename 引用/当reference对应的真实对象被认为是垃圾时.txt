Reference的static块中启动了线程ReferenceHandler
最终将调用：
while(true) {
	Reference.tryHandlePending(true);
}

Reference#static boolean tryHandlePending(boolean var0) {
    Reference var1;
    Cleaner var2;
    try {
        Reference.Lock var3 = lock;
        synchronized(lock) {
            if(pending == null) {
                if(var0) {
                    lock.wait();
                }

                return var0;
            }

            //当前要处理的reference（其所引用的真实对象 已经被认为是垃圾（gcroot不可达））
            var1 = pending;
            var2 = var1 instanceof Cleaner?(Cleaner)var1:null;
            //下一个要处理的reference
            pending = var1.discovered;
            var1.discovered = null;
        }
    } catch (OutOfMemoryError var6) {
        Thread.yield();
        return true;
    } catch (InterruptedException var7) {
        return true;
    }

    //如果reference是cleaner，则调用clean
    if(var2 != null) {
        var2.clean();
        return true;
    }
    //否则，reference是否对应了referencequeue，如果对应，那么其被放入到queue中
    else {
        ReferenceQueue var8 = var1.queue;
        if(var8 != ReferenceQueue.NULL) {
            var8.enqueue(var1);
        }

        return true;
    }
}
