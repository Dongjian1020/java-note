Reference的static块中启动了线程ReferenceHandler
最终将调用：
while(true) {
	Reference.tryHandlePending(true);
}

Reference#static boolean tryHandlePending(boolean waitForNotify) {
	Reference<Object> r;
	Cleaner c;
	try {
		synchronized (lock) {
			if (pending != null) {
				//当前要处理的reference
				//其所引用的真实对象 已经被认为是 “gcroot不可达”（某种程度的唯一可达，如：只weak reachable），此刻还未调用gc，也未执行真实对象的finalize方法
				r = pending;
				// 'instanceof' might throw OutOfMemoryError sometimes
				// so do this before un-linking 'r' from the 'pending' chain...
				c = r instanceof Cleaner ? (Cleaner) r : null;
				// unlink 'r' from 'pending' chain
				//下一个要处理的reference
				pending = r.discovered;
				r.discovered = null;
			} else {
				// The waiting on the lock may cause an OutOfMemoryError
				// because it may try to allocate exception objects.
				if (waitForNotify) {
					lock.wait();
				}
				// retry if waited
				return waitForNotify;
			}
		}
	} catch (OutOfMemoryError x) {
		// Give other threads CPU time so they hopefully drop some live references
		// and GC reclaims some space.
		// Also prevent CPU intensive spinning in case 'r instanceof Cleaner' above
		// persistently throws OOME for some time...
		Thread.yield();
		// retry
		return true;
	} catch (InterruptedException x) {
		// retry
		return true;
	}

	// Fast path for cleaners
	//如果reference是cleaner，则调用clean
	if (c != null) {
		c.clean();
		return true;
	}

    //否则，reference是否对应了referencequeue，如果对应，那么其被放入到queue中
	ReferenceQueue<? super Object> q = r.queue;
	if (q != ReferenceQueue.NULL) q.enqueue(r);
	return true;
}
