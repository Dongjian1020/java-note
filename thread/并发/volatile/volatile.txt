参见：
Java 并发编程 : volatile 关键字解析
	http://mp.weixin.qq.com/s/WPHqv2RpT8ZM9gbQgXWx3Q
Android并发编程之图文解析volatile关键字
	http://blog.csdn.net/nugongahou110/article/details/49927667
深入理解Java内存模型（四）——volatile
	http://www.infoq.com/cn/articles/java-memory-model-4
Java 理论与实践: 正确使用 Volatile 变量
	http://www.ibm.com/developerworks/cn/java/j-jtp06197.html
	http://www.uml.org.cn/j2ee/201505252.asp

----------------------------------------可见性
保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。
	参见：并发特性/可见性.txt

----------------------------------------禁止进行指令重排序
例子：
//x、y为非volatile变量
//flag为volatile变量
 
x = 2;        //语句1
y = 0;        //语句2
flag = true;  //语句3
x = 4;         //语句4
y = -1;       //语句5

由于flag变量为volatile变量，那么在进行指令重排序的过程的时候，
	不会将语句3放到语句1、语句2前面，
		执行到语句3时，语句1和语句2必定是执行完毕了的，且语句1和语句2的执行结果对语句3、语句4、语句5是可见的。
	也不会将语句3放到语句4、语句5后面。
	说明：但是要注意语句1和语句2的顺序、语句4和语句5的顺序是不作任何保证的。

----------------------------------------不能保证原子性
不能保证原子性

----------------------------------------原理
参见：深入理解Java虚拟机

“观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”

lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），内存屏障会提供3个功能：
1）它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；
2）它会强制将对缓存的修改操作立即写入主存；
3）如果是写操作，它会导致其他CPU中对应的缓存行无效。

----------------------------------------之前的内容↓

volatile变量的 读取和赋值 可认为是原子，可认为等价于 synchronized(this)

volatile变量的 读取和赋值 是互斥的
但，多个线程可同时 读取 volatile变量

----------------------------------------之前的内容↓
用在多线程，同步变量。 线程为了提高效率，将某成员变量(如A)拷贝了一份（如B），线程中对A的访问其实访问的是B。只在某些动作时才进行A和B的同步。因此存在A和B不一致的情况。volatile就是用来避免这种情况的。volatile告诉jvm， 它所修饰的变量不保留拷贝，直接访问主内存中的（也就是上面说的A) 
