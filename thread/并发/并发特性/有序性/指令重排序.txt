int i = 0;              
boolean flag = false;
i = 1;                //语句1  
flag = true;          //语句2
从代码顺序上看，语句1是在语句2前面的，那么JVM在真正执行这段代码的时候，会保证语句1一定会在语句2前面执行吗？不一定，这里可能会发生指令重排序
	处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的
	处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令Instruction 2必须用到Instruction 1的结果，那么处理器会保证Instruction 1会在Instruction 2之前执行。
	指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。
上面的例子中，语句1和语句2谁先执行对最终的程序结果并没有影响，那么就有可能在执行过程中，语句2先执行而语句1后执行。

针对于多线程可能会引发问题：
//线程1:
context = loadContext();   //语句1
inited = true;             //语句2
//线程2:
while(!inited ){
  sleep()
}
doSomethingwithconfig(context);
由于语句1和语句2没有数据依赖性，因此可能会被重排序。
假如发生了重排序，在线程1执行过程中先执行语句2，而此是线程2会以为初始化工作已经完成，那么就会跳出while循环，去执行doSomethingwithconfig(context)方法，而此时context并没有被初始化，就会导致程序出错。