原子性
一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行

例子：
x = 10;        //语句1，是原子的
y = x;         //语句2，并不是原子的
x++;           //语句3，并不是原子的
x = x + 1;     //语句4，并不是原子的
	分解来看：
		读取x的值（从线程的工作内存中读取，或者，从主存中读取（如：工作内存中 该变量的缓存行无效时））
		进行+1操作
		将运算的值赋予该x（写入到线程的工作内存中，后在某个时刻写入到主存中）

只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作

在32位平台下，对64位数据的读取和赋值是需要通过两个操作来完成的，不能保证其原子性
但是好像在最新的JDK中，JVM已经保证对64位数据的读取和赋值也是原子性操作了。