可见性
多个线程访问同一个共享变量时，当一个线程修改了该变量后，其他线程再读取该变量时，得到的是 修改后的值（而非自己工作内存中的老值）
为什么还会谈及可见性：
每个线程均存在一个线程工作内存，当一个线程要使用一个变量（有可能是 对象的一个字段，或者，类的静态变量）时，会将该变量从主内存中 拷贝到工作内存（如果线程要使用一个对象的某个字段，那么就仅拷贝该字段，而不是整个对象，试想下一个对象占用的内存空间很大，如10M，每个线程都拷贝这10M的内容，没人会受得了；且，线程只会访问对象的该字段，而不访问其他字段，就算拷贝了，也不用，是种浪费），对该变量进行了修改后，仅体现在线程的工作内存中，后续在某个时刻，再写入到主内存中（实际上，线程是不和主内存打交道的）

volatile
当线程1对 共享变量i 进行修改时，
	会将修改的值先写入到线程1的工作内存，后立即将修改后的值写入主存中，
	会导致线程2的工作内存中缓存变量i的缓存行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效）；
		则线程2再次读取变量i的值时，会等待缓存行对应的主存地址被更新之后，然后从对应的主存读取最新的值。

synchronized和Lock
synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，
保证可见性：
	在获得一个变量的lock时，会重新从主内存中load该变量的值到工作内存中
	在释放该变量的锁之前，会将对变量的修改刷新到主存当中

