class Task implements Callable<Integer>{
    @Override
    public Integer call() throws Exception {
        System.out.println("子线程在进行计算");
        Thread.sleep(3000);
        int sum = 0;
        for(int i=0;i<100;i++)
            sum += i;
        return sum;
    }
}

public class Test {
    public static void main(String[] args) {
        //第一种方式，使用线程池
        ExecutorService executor = Executors.newCachedThreadPool();
        Task task = new Task();
        FutureTask<Integer> futureTask = new FutureTask<Integer>(task);
        //本质上：submit一个callable，会返回一个future
        Future<Integer> future = executor.submit(futureTask);
        executor.shutdown();
         
        //第二种方式，使用thread
        /*
        Task task = new Task();
        FutureTask<Integer> futureTask = new FutureTask<Integer>(task);
        //本质上：使用runnable
        Thread thread = new Thread(futureTask);
        thread.start();
        */
         
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e1) {
            e1.printStackTrace();
        }
         
        System.out.println("主线程在执行任务");
         
        try {
            System.out.println("task运行结果"+futureTask.get());
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (ExecutionException e) {
            e.printStackTrace();
        }
         
        System.out.println("所有任务执行完毕");
    }
}

