参见：
线程、多线程与线程池总结
	http://www.jianshu.com/p/b8197dd2934c
Java并发编程：Callable、Future和FutureTask
	http://www.cnblogs.com/dolphin0520/p/3949310.html

Callable<V>:
1）Callable 接口下的方法是 call()，Runnable 接口的方法是 run()。
2）Callable 的任务执行后可返回值，而 Runnable 的任务是不能返回值的。
3）call() 方法可以抛出异常，run()方法不可以的。
4）运行 Callable 任务可以拿到一个 Future 对象，
  通过Future对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果
5）配合ExecutorService使用时，execute(runnable),submit(callable)

Future<V>:
通过 Future 对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果（期间等待计算的完成）。
V get()throws InterruptedException,ExecutionException：如有必要，等待计算完成，然后获取其结果。
	当调用get时，如果结果还没有获得，将会阻塞当前线程，直到结果被计算出来
cancel(boolean mayInterruptIfRunning)
	会尝试取消未完成的任务
		未执行->直接不执行
		已经完成->返回false
		正在执行
      如果mayInterruptIfRunning为false，则会继续执行，只是，结束后不会调用onPostExecute，而是执行onCancelled
      如果mayInterruptIfRunning为true，则会尝试中断
isDone
  任务是否执行完毕
  非阻塞方法

FutureTask:
实现了 Runnable 和 Future
