参见：
线程、多线程与线程池总结
	http://www.jianshu.com/p/b8197dd2934c
Java并发编程：Callable、Future和FutureTask
	http://www.cnblogs.com/dolphin0520/p/3949310.html

Callable<V>:
1）Callable 接口下的方法是 call()，Runnable 接口的方法是 run()。
2）Callable 的任务执行后可返回值，而 Runnable 的任务是不能返回值的。
3）call() 方法可以抛出异常，run()方法不可以的。
4）运行 Callable 任务可以拿到一个 Future 对象，表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。通过 Future 对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果。

Future<V>：
可以获得callable的执行结果，也提供了诸如cancel之类的方法
V get()throws InterruptedException,ExecutionException：如有必要，等待计算完成，然后获取其结果。
	当调用get时，如果结果还没有获得，将会阻塞当前线程，直到结果被计算出来
cancel()
	会尝试取消未完成的任务
		未执行->直接不执行
		已经完成->返回false
		正在执行->尝试中断

FutureTask 
实现了 Runnable 和 Future

---------------------------------一个例子
 interface ArchiveSearcher { String search(String target); 
 class App {
   ExecutorService executor = ...
   ArchiveSearcher searcher = ...
   
   void showSearch(final String target)
       throws InterruptedException {
     Future future
       = executor.submit(new Callable() {
         public String call() {
             return searcher.search(target);
         }});
     displayOtherThings(); // do other things while searching
     try {
       displayText(future.get()); // use future
     } catch (ExecutionException ex) { cleanup(); return; }
   }
 }}